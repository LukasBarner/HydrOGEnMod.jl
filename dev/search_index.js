var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = HydrOGEnMod","category":"page"},{"location":"#HydrOGEnMod","page":"Home","title":"HydrOGEnMod","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for HydrOGEnMod.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [HydrOGEnMod]","category":"page"},{"location":"#HydrOGEnMod.build_complementarity_model","page":"Home","title":"HydrOGEnMod.build_complementarity_model","text":"build_complementarity_model(data::ModelData, BIG = 1e+6, logfile = \"\")\n\nBuild a JuMP model with complementarity extension from the underlying model data. \n\nA logfile and upper bounds on variables can be specified. \n\nExamples\n\njulia> using HydrOGEnMod\njulia> data = get_HydrOGEnMod_data();\njulia> build_complementarity_model(data)\nA JuMP Model\nFeasibility problem with:\nVariables: 35\n`JuMP.VariableRef`-in-`MathOptInterface.GreaterThan{Float64}`: 34 constraints\n`JuMP.VariableRef`-in-`MathOptInterface.LessThan{Float64}`: 34 constraints\nModel mode: AUTOMATIC\nCachingOptimizer state: NO_OPTIMIZER\nSolver name: No optimizer attached.\nNames registered in the model: arc_capacity, conversion_capacity, conversion_cost, conversion_expansion_cost, conversion_repurposing_cost, demand, equal_arc_expansion, equal_arc_repurposing, gross_surplus, input_block_limit, input_cost, input_expansion_cost, input_expansion_limit, market_power_adjustment, prices, producer_mass_balance, production_capacity, production_cost, production_expansion_cost, production_expansion_limit, q_I, q_P_T, q_S, q_S_in, q_S_out, q_T, q_T_D, q_V, storage_capacities, storage_cost, storage_expansion_cost, storage_expansion_limit, storage_mass_balance, storage_repurposing_cost, trade_sanctions, trader_mass_balance, transport_cost, transport_expansion_cost, transport_repurposing_cost, yearly_arc_flows, yearly_demand, yearly_input_procurement, yearly_production, Δ_A, Δ_I, Δ_P, Δ_RA, Δ_RS, Δ_RV, Δ_S, Δ_V\n\n\n\n\n\n","category":"function"},{"location":"#HydrOGEnMod.build_optimization_model","page":"Home","title":"HydrOGEnMod.build_optimization_model","text":"build_optimization_model(data::ModelData, BIG = 1e+6, logfile = \"\")\n\nBuild a JuMP optimization model (QP) from the underlying model data. \n\nA logfile and upper bounds on variables can be specified. \n\nExamples\n\njulia-repl julia> using HydrOGEnMod julia> data = get_HydrOGEnMod_data(); julia> build_optimization_model(data) A JuMP Model Maximization problem with: Variables: 11 Objective function type: JuMP.QuadExpr `JuMP.AffExpr`-in-`MathOptInterface.EqualTo{Float64}`: 3 constraints `JuMP.AffExpr`-in-`MathOptInterface.LessThan{Float64}`: 8 constraints `JuMP.VariableRef`-in-`MathOptInterface.GreaterThan{Float64}`: 11 constraints `JuMP.VariableRef`-in-`MathOptInterface.LessThan{Float64}`: 11 constraints Model mode: AUTOMATIC CachingOptimizer state: NO_OPTIMIZER Solver name: No optimizer attached. Names registered in the model: arc_capacity, conversion_capacity, conversion_cost, conversion_expansion_cost, conversion_repurposing_cost, demand, equal_arc_expansion, equal_arc_repurposing, gross_surplus, input_block_limit, input_cost, input_expansion_cost, input_expansion_limit, market_power_adjustment, prices, producer_mass_balance, production_capacity, production_cost, production_expansion_cost, production_expansion_limit, q_I, q_P_T, q_S, q_S_in, q_S_out, q_T, q_T_D, q_V, storage_capacities, storage_cost, storage_expansion_cost, storage_expansion_limit, storage_mass_balance, storage_repurposing_cost, trade_sanctions, trader_mass_balance, transport_cost, transport_expansion_cost, transport_repurposing_cost, yearly_arc_flows, yearly_demand, yearly_input_procurement, yearly_production, Δ_A, Δ_I, Δ_P, Δ_RA, Δ_RS, Δ_RV, Δ_S, Δ_V\n\n\n\n\n\n","category":"function"},{"location":"#HydrOGEnMod.get_HydrOGEnMod_data-Tuple{}","page":"Home","title":"HydrOGEnMod.get_HydrOGEnMod_data","text":"get_HydrOGEnMod_data(;data = joinpath(dirname(dirname(pathof(HydrOGEnMod))), \"data\", \"data_pc\"), logfile = \"\")\n\nGet the model data\n\nA separate datafile and a file where to write the log records can be specified via keyword arguments. \n\nExamples\n\njulia> using HydrOGEnMod\njulia> data = get_HydrOGEnMod_data();\n\n\n\n\n\n","category":"method"},{"location":"#HydrOGEnMod.plot_model_nodes-Tuple{Vector{HydrOGEnMod.HydrOGEnMod_Types.TransportArc}}","page":"Home","title":"HydrOGEnMod.plot_model_nodes","text":"plot_model_nodes(arcs::Vector{TransportArc}; nodes_path = joinpath(@__DIR__, \"maps\", \"WB_countries_Admin0_modified.geojson\"), disputed_path = joinpath(@__DIR__, \"maps\", \"WB_Admin0_disputed_areas_modified.geojson\"), centroids_path = joinpath(@__DIR__, \"maps\", \"centroids.csv\"), colorscheme = :seaborn_colorblind6, unassigned_color = :gray85, strokecolor = :black, strokewidth = 0.1, linewidth = 0.2, linecolor = :black, size = (1200, 800), backgroundcolor = RGBf(0.95, 0.95, 0.95), rasterize = 10, map_title = \"Model Nodes\", save_path = \"\")\n\nPlot the passed arcs into the model node map. \n\nSeparate method implemented for also passing arc values.\n\nKeyword Arguments\n\nnodes_path = joinpath(@__DIR__, \"maps\", \"WB_countries_Admin0_modified.geojson\"): Path where to find model nodes geojson file.\ndisputed_path = joinpath(@__DIR__, \"maps\", \"WB_Admin0_disputed_areas_modified.geojson\"): Path where to find disputed areas geojson file.\ncentroids_path = joinpath(@__DIR__, \"maps\", \"centroids.csv\"): Path where to find model region centroids file.\ncolorscheme = :seaborn_colorblind6: Colorscheme for the model regions.\nunassigned_color = :gray85: Colorscheme for unassigned and disputed regions.\nstrokecolor = :black: Strokecolor around regions.\nstrokewidth = 0.1: Strokewidth around regions.\nlinewidth = 0.2: Arc linewidth connecting nodes.\nlinecolor = :black: Color of arcs connecting nodes.\nsize = (1200, 800): Picture size.\nbackgroundcolor = RGBf(0.95, 0.95, 0.95): Backgroundcolor.\nrasterize = 10: Rasterization to reduce output file size, lesser implies smaller files.\nmap_title = \"Model Nodes\": Specification of the title.\nsave_path = \"\": Where to save the resulting graphic. Ending of filename automatically implies file format. \n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#HydrOGEnMod.plot_model_nodes-Tuple{}","page":"Home","title":"HydrOGEnMod.plot_model_nodes","text":"plot_model_nodes(; nodes_path = joinpath(@__DIR__, \"maps\", \"WB_countries_Admin0_modified.geojson\"), disputed_path = joinpath(@__DIR__, \"maps\", \"WB_Admin0_disputed_areas_modified.geojson\"), colorscheme = :seaborn_colorblind6, unassigned_color = :gray85, strokecolor = :black, strokewidth = 0.1, size = (1200, 800), backgroundcolor = RGBf(0.95, 0.95, 0.95), rasterize = 10, map_title = \"Model Nodes\", legend_title = \"Node Names\", save_path = \"\",)\n\nPlot an overview of the model nodes. \n\nOnly active, if no positional argument is passed. \n\nKeyword Arguments\n\nnodes_path = joinpath(@__DIR__, \"maps\", \"WB_countries_Admin0_modified.geojson\"): Path where to find model nodes geojson file.\ndisputed_path = joinpath(@__DIR__, \"maps\", \"WB_Admin0_disputed_areas_modified.geojson\"): Path where to find disputed areas geojson file.\ncolorscheme = :seaborn_colorblind6: Colorscheme for the model regions.\nunassigned_color = :gray85: Colorscheme for unassigned and disputed regions.\nstrokecolor = :black: Strokecolor around regions.\nstrokewidth = 0.1: Strokewidth around regions.\nsize = (1200, 800): Picture size.\nbackgroundcolor = RGBf(0.95, 0.95, 0.95): Backgroundcolor.\nrasterize = 10: Rasterization to reduce output file size, lesser implies smaller files.\nmap_title = \"Model Nodes\": Specification of the title.\nlegend_title = \"Node Names\": Title of the legend.\nsave_path = \"\": Where to save the resulting graphic. Ending of filename automatically implies file format. \n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#HydrOGEnMod.plot_model_nodes-Union{Tuple{JuMP.Containers.DenseAxisArray{T, N, Ax, L}}, Tuple{L}, Tuple{Ax}, Tuple{N}, Tuple{T}} where {T, N, Ax, L<:Tuple{Vararg{JuMP.Containers._AxisLookup, N}}}","page":"Home","title":"HydrOGEnMod.plot_model_nodes","text":"plot_model_nodes(container::JuMP.Containers.DenseAxisArray{T,N,Ax,L}; nodes_path = joinpath(@__DIR__, \"maps\", \"WB_countries_Admin0_modified.geojson\"), disputed_path = joinpath(@__DIR__, \"maps\", \"WB_Admin0_disputed_areas_modified.geojson\"), colorscheme = :plasma, unassigned_color = :gray85, strokecolor = :black, strokewidth = 0.1, size = (1200, 800), backgroundcolor = RGBf(0.95, 0.95, 0.95), rasterize = 10, map_title = \"Model Nodes\", save_path = \"\") where {T,N,Ax,L<:NTuple{N,JuMP.Containers._AxisLookup}}\n\nPlot the values inside container into the model node map. \n\nSeparate methods implemented for DenseAxisArray and SparseAxisArray.\n\nKeyword Arguments\n\nnodes_path = joinpath(@__DIR__, \"maps\", \"WB_countries_Admin0_modified.geojson\"): Path where to find model nodes geojson file.\ndisputed_path = joinpath(@__DIR__, \"maps\", \"WB_Admin0_disputed_areas_modified.geojson\"): Path where to find disputed areas geojson file.\ncolorscheme = :plasma: Colorscheme for the model regions.\nunassigned_color = :gray85: Colorscheme for unassigned and disputed regions.\nstrokecolor = :black: Strokecolor around regions.\nstrokewidth = 0.1: Strokewidth around regions.\nsize = (1200, 800): Picture size.\nbackgroundcolor = RGBf(0.95, 0.95, 0.95): Backgroundcolor.\nrasterize = 10: Rasterization to reduce output file size, lesser implies smaller files.\nmap_title = \"Model Nodes\": Specification of the title.\nsave_path = \"\": Where to save the resulting graphic. Ending of filename automatically implies file format. \n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#HydrOGEnMod.plot_model_nodes-Union{Tuple{JuMP.Containers.SparseAxisArray{T, N, K}}, Tuple{K}, Tuple{N}, Tuple{T}} where {T, N, K<:Tuple{Vararg{Any, N}}}","page":"Home","title":"HydrOGEnMod.plot_model_nodes","text":"plot_model_nodes(container::JuMP.Containers.SparseAxisArray{T,N,K}; nodes_path = joinpath(@__DIR__, \"maps\", \"WB_countries_Admin0_modified.geojson\"), disputed_path = joinpath(@__DIR__, \"maps\", \"WB_Admin0_disputed_areas_modified.geojson\"), colorscheme = :plasma, unassigned_color = :gray85, strokecolor = :black, strokewidth = 0.1, size = (1200, 800), backgroundcolor = RGBf(0.95, 0.95, 0.95), rasterize = 10, map_title = \"Model Nodes\", save_path = \"\")\n\nPlot the values inside container into the model node map. \n\nSeparate methods implemented for DenseAxisArray and SparseAxisArray.\n\nKeyword Arguments\n\nnodes_path = joinpath(@__DIR__, \"maps\", \"WB_countries_Admin0_modified.geojson\"): Path where to find model nodes geojson file.\ndisputed_path = joinpath(@__DIR__, \"maps\", \"WB_Admin0_disputed_areas_modified.geojson\"): Path where to find disputed areas geojson file.\ncolorscheme = :plasma: Colorscheme for the model regions.\nunassigned_color = :gray85: Colorscheme for unassigned and disputed regions.\nstrokecolor = :black: Strokecolor around regions.\nstrokewidth = 0.1: Strokewidth around regions.\nsize = (1200, 800): Picture size.\nbackgroundcolor = RGBf(0.95, 0.95, 0.95): Backgroundcolor.\nrasterize = 10: Rasterization to reduce output file size, lesser implies smaller files.\nmap_title = \"Model Nodes\": Specification of the title.\nsave_path = \"\": Where to save the resulting graphic. Ending of filename automatically implies file format. \n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#HydrOGEnMod.plot_model_nodes-Union{Tuple{L}, Tuple{Ax}, Tuple{N}, Tuple{T}, Tuple{JuMP.Containers.DenseAxisArray{T, N, Ax, L}, Vector{HydrOGEnMod.HydrOGEnMod_Types.TransportArc}}} where {T, N, Ax, L<:Tuple{Vararg{JuMP.Containers._AxisLookup, N}}}","page":"Home","title":"HydrOGEnMod.plot_model_nodes","text":"plot_model_nodes(container::JuMP.Containers.DenseAxisArray{T,N,Ax,L}, arcs::Vector{TransportArc}; nodes_path = joinpath(@__DIR__, \"maps\", \"WB_countries_Admin0_modified.geojson\"), disputed_path = joinpath(@__DIR__, \"maps\", \"WB_Admin0_disputed_areas_modified.geojson\"), centroids_path = joinpath(@__DIR__, \"maps\", \"centroids.csv\"), colorscheme = :seaborn_colorblind6, unassigned_color = :gray85, strokecolor = :black, strokewidth = 0.1, linewidth = 1, linecolorscheme = :plasma, size = (1200, 800), backgroundcolor = RGBf(0.95, 0.95, 0.95), rasterize = 10, largestvalues = 10, map_title = \"Model Nodes\", save_path = \"\") where {T,N,Ax,L<:NTuple{N,JuMP.Containers._AxisLookup}}\n\nPlot the passed arcs with coloring corresponding to given values in the container into the model node map. \n\nSeparate method implemented for just plotting normal values.\n\nKeyword Arguments\n\nnodes_path = joinpath(@__DIR__, \"maps\", \"WB_countries_Admin0_modified.geojson\"): Path where to find model nodes geojson file.\ndisputed_path = joinpath(@__DIR__, \"maps\", \"WB_Admin0_disputed_areas_modified.geojson\"): Path where to find disputed areas geojson file.\ncentroids_path = joinpath(@__DIR__, \"maps\", \"centroids.csv\"): Path where to find model region centroids file.\ncolorscheme = :seaborn_colorblind6: Colorscheme for the model regions.\nunassigned_color = :gray85: Colorscheme for unassigned and disputed regions.\nstrokecolor = :black: Strokecolor around regions.\nstrokewidth = 0.1: Strokewidth around regions.\nlinewidth = 1: Arc linewidth connecting nodes.\nlinecolorscheme = :plasma: Colorscheme for coloring arcs connecting regions based on container values.\nsize = (1200, 800): Picture size.\nbackgroundcolor = RGBf(0.95, 0.95, 0.95): Backgroundcolor.\nrasterize = 10: Rasterization to reduce output file size, lesser implies smaller files.\nlargestvalues = 10: The n largest arc values and equal to select.\nminval = 1: The smallest value to include in the arc plot.\nmap_title = \"Model Nodes\": Specification of the title.\nsave_path = \"\": Where to save the resulting graphic. Ending of filename automatically implies file format.\n\nExamples\n\n\n\n\n\n\n\n","category":"method"},{"location":"#HydrOGEnMod.solve_mcp-Tuple{JuMP.Model}","page":"Home","title":"HydrOGEnMod.solve_mcp","text":"solve_mcp(model::Model; logfile = \"\", kwargs...)\n\nSolve a JuMP model with complementarity extension using the PATH solver. \n\nA logfile can be specified, and solver specific options can be passed.\n\nExamples\n\njulia> using HydrOGEnMod\njulia> data = get_HydrOGEnMod_data();\njulia> model = build_complementarity_model(data);\njulia> solve_mcp(model; output = \"no\", time_limit = 5)\nReading options file /var/folders/c7/86nwrvmd1c325s4lzwg77jz40000gn/T/jl_CJTzvb\nRead of options file complete.\n\nPath 5.1.99 (Mon Jul 24 14:47:28 2023)\nWritten by Todd Munson, Steven Dirkse, Youngdae Kim, and Michael Ferris\n:Solved\n\n\n\n\n\n","category":"method"},{"location":"#HydrOGEnMod.write_csv-Tuple{Any, HydrOGEnMod.HydrOGEnMod_Types.ModelData}","page":"Home","title":"HydrOGEnMod.write_csv","text":"write_csv(datadir, data::ModelData; logfile = \"\")\n\nWrite model data to a specific directory. \n\nA logfile can be specified.\n\nExamples\n\njulia> using HydrOGEnMod\njulia> data = get_HydrOGEnMod_data();\njulia> write_csv(\"path/to/my/dir\",data);\n\n\n\n\n\n","category":"method"},{"location":"#HydrOGEnMod.write_csv-Tuple{Any, JuMP.Model}","page":"Home","title":"HydrOGEnMod.write_csv","text":"write_csv(resultsfile, model::Model; logfile = \"\")\n\nWrite model results to a specific directory. \n\nA logfile can be specified.\n\nExamples\n\njulia> data = get_HydrOGEnMod_data();\njulia> write_csv(\"path/to/my/dir\",data);\njulia> model = build_optimization_model(data);\njulia> optimize!(model, Ipopt.Optimizer);\njulia> write_csv(\"path/to/my/dir\",model);\n\n\n\n\n\n","category":"method"},{"location":"#JuMP.optimize!-Tuple{JuMP.Model, Any, Vararg{Any}}","page":"Home","title":"JuMP.optimize!","text":"optimize!(model::Model, optimizer; options..., logfile = \"\")\n\nSolve a JuMP Model with the given optimizer. \n\nA logfile can be specified, and solver specific options can be passed. \n\nExamples\n\n```julia-repl julia> using HydrOGEnMod julia> using Ipopt julia> data = getHydrOGEnModdata(); julia> model = buildoptimizationmodel(data); julia> optimize!(model, Ipopt.Optimizer, \"maxwalltime\" => 1e-5) ****************************************************************************** This program contains Ipopt, a library for large-scale nonlinear optimization.  Ipopt is released as open source code under the Eclipse Public License (EPL).          For more information visit https://github.com/coin-or/Ipopt ******************************************************************************\n\nThis is Ipopt version 3.14.13, running with linear solver MUMPS 5.6.0.\n\nNumber of nonzeros in equality constraint Jacobian...:        6 Number of nonzeros in inequality constraint Jacobian.:        7 Number of nonzeros in Lagrangian Hessian.............:        2\n\nTotal number of variables............................:       11                      variables with only lower bounds:        0                 variables with lower and upper bounds:       11                      variables with only upper bounds:        0 Total number of equality constraints.................:        3 Total number of inequality constraints...............:        8         inequality constraints with only lower bounds:        0    inequality constraints with lower and upper bounds:        0         inequality constraints with only upper bounds:        8\n\niter    objective    infpr   infdu lg(mu)  ||d||  lg(rg) alphadu alphapr  ls    0 -9.0099910e-02 1.00e-02 1.00e+01  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0\n\nNumber of Iterations....: 0\n\n                               (scaled)                 (unscaled)\n\nObjective...............:   9.0099909800000114e-02   -9.0099909800000114e-02 Dual infeasibility......:   1.0000000000000000e+01    1.0000000000000000e+01 Constraint violation....:   9.9999800000000003e-03    9.9999800000000003e-03 Variable bound violation:   0.0000000000000000e+00    0.0000000000000000e+00 Complementarity.........:   9.9999999010000995e+05    9.9999999010000995e+05 Overall NLP error.......:   9.9999999010000995e+05    9.9999999010000995e+05\n\nNumber of objective function evaluations             = 1 Number of objective gradient evaluations             = 1 Number of equality constraint evaluations            = 1 Number of inequality constraint evaluations          = 1 Number of equality constraint Jacobian evaluations   = 1 Number of inequality constraint Jacobian evaluations = 1 Number of Lagrangian Hessian evaluations             = 0 Total seconds in IPOPT                               = 0.000\n\nEXIT: Maximum wallclock time exceeded. ┌ Status: Optimizing Model │   Progress:                                                 Solution Status TIMELIMIT. │   Time elapsed:                                                                   0.14s └ @ HydrOGEnMod /Users/lb/Desktop/git/HydrOGEnMod/src/optimizationmodel.jl:999 ┌ Status: Optimizing Model │   Progress:                                                            Returning Model. │   Time elapsed:                                                                   0.14s └ @ HydrOGEnMod /Users/lb/Desktop/git/HydrOGEnMod/src/optimizationmodel.jl:1002 A JuMP Model Maximization problem with: Variables: 11 Objective function type: JuMP.QuadExpr JuMP.AffExpr-in-MathOptInterface.EqualTo{Float64}: 3 constraints JuMP.AffExpr-in-MathOptInterface.LessThan{Float64}: 8 constraints JuMP.VariableRef-in-MathOptInterface.GreaterThan{Float64}: 11 constraints JuMP.VariableRef-in-MathOptInterface.LessThan{Float64}: 11 constraints Model mode: AUTOMATIC CachingOptimizer state: ATTACHEDOPTIMIZER Solver name: Ipopt Names registered in the model: arccapacity, conversioncapacity, conversioncost, conversionexpansioncost, conversionrepurposingcost, demand, equalarcexpansion, equalarcrepurposing, grosssurplus, inputblocklimit, inputcost, inputexpansioncost, inputexpansionlimit, marketpoweradjustment, prices, producermassbalance, productioncapacity, productioncost, productionexpansioncost, productionexpansionlimit, qI, qPT, qS, qSin, qSout, qT, qTD, qV, storagecapacities, storagecost, storageexpansioncost, storageexpansionlimit, storagemassbalance, storagerepurposingcost, tradesanctions, tradermassbalance, transportcost, transportexpansioncost, transportrepurposingcost, yearlyarcflows, yearlydemand, yearlyinputprocurement, yearlyproduction, ΔA, ΔI, ΔP, ΔRA, ΔRS, ΔRV, ΔS, Δ_V```\n\n\n\n\n\n","category":"method"}]
}
